// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc948.NRGRobot2013.subsystems;

import org.usfirst.frc948.NRGRobot2013.RobotMap;
import org.usfirst.frc948.NRGRobot2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import org.usfirst.frc948.NRGRobot2013.utilities.MathHelper;

/**
 * @author Charles, Jared
 */
public class Drive extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftMotor1 = RobotMap.driveleftMotor1;
    SpeedController leftMotor2 = RobotMap.driveleftMotor2;
    SpeedController rightMotor1 = RobotMap.driverightMotor1;
    SpeedController rightMotor2 = RobotMap.driverightMotor2;
    static Encoder leftQuadrature = RobotMap.driveleftQuadrature;
    static Encoder rightQuadrature = RobotMap.driverightQuadrature;
    Gyro gyro = RobotMap.drivegyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private double pidOutput;
    private double desiredHeading;
    private static double encoderDistance;
    static final double kP = 0.02;
    static final double kI = 0.005;
    static final double kD = 0.001;
    private long lastTime;
    private double lastLeftPower = 0.0;
    private double lastRightPower = 0.0;
    private static final double MAX_CHANGE_RATE = 0.001; //power change per millisecond

    public Drive() {
        super("DrivePID", kP, kI, kD);
        lastTime = System.currentTimeMillis();
    }

    public void driveStraightInit() {
        this.getPIDController().reset();
        this.getPIDController().enable();
    }

    public void driveStraight(double speed, double heading) {
        this.setSetpoint(heading);

        double leftSpeed = speed;
        double rightSpeed = speed - pidOutput;
        if (rightSpeed > 1d || rightSpeed < -1d) {
            leftSpeed = speed + pidOutput;
            rightSpeed = speed;
        }

        tankDrive(leftSpeed, rightSpeed);
    }

    public void driveStraightEnd() {
        this.getPIDController().disable();
    }

    public void tankDrive(double leftPower, double rightPower) {
        long currentTime = System.currentTimeMillis();
        // If the robot is disabled and then enabled we don't want this value to be to large
        double maxPowerDifference = MAX_CHANGE_RATE * MathHelper.min((currentTime - lastTime), 100);
        lastTime = currentTime;
        if (Math.abs(leftPower - lastLeftPower) > maxPowerDifference) {
            leftPower = lastLeftPower + maxPowerDifference;
        }
        leftMotor1.set(leftPower);
        leftMotor2.set(leftPower);
        lastLeftPower = leftPower;

        if (Math.abs(rightPower - lastRightPower) > maxPowerDifference) {
            rightPower = lastRightPower + maxPowerDifference;
        }
        rightMotor1.set(-rightPower);
        rightMotor2.set(-rightPower);
        lastRightPower = rightPower;

    }

    public void stop() {
        try {
            while (Math.abs(lastLeftPower) > 0.2 || Math.abs(lastRightPower) > 0.2) {
                tankDrive(0, 0);
                Thread.sleep(100);
            }
        } catch (InterruptedException e) {
        }

        leftMotor1.set(0);
        leftMotor2.set(0);
        rightMotor1.set(0);
        rightMotor2.set(0);
    }

    public double getDesiredHeading() {
        return desiredHeading;
    }

    public void setDesiredHeading(double newHeading) {
        desiredHeading = newHeading;
    }

    public double getGyroAngle() {
        return gyro.getAngle();
    }

    public void resetGyro() {
        gyro.reset();
    }

    public void setGyroSensitivity(double k) {
        gyro.setSensitivity(k);
    }

    public static void resetRightEncoder() {
        rightQuadrature.reset();
    }

    public static void resetLeftEncoder() {
        leftQuadrature.reset();
    }

    public static double getEncoderDistance() {
        encoderDistance = MathHelper.max(Math.abs(leftQuadrature.getDistance()), Math.abs(rightQuadrature.getDistance()));
        return encoderDistance;
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new OperatorDriveCommand());
    }

    protected double returnPIDInput() {
        return getGyroAngle();
    }

    protected void usePIDOutput(double d) {
        pidOutput = d;
    }
}
