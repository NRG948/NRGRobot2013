// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc948.NRGRobot2013.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc948.NRGRobot2013.RobotMap;
import org.usfirst.frc948.NRGRobot2013.utilities.MathHelper;
import org.usfirst.frc948.NRGRobot2013.utilities.ShooterControl;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class PIDShooter extends PIDSubsystem implements IShooter {


    
    private double desiredFrisbeeSpeed = 0; //Angular velocity of the wheel
    private double currentMotorSpeed = 0;
    private static double speed; //speed of the motor wheel
    private static final double P = 0.01;
    private static final double I = P / 2;
    private static final double D = 0.0;
    private static final double pidOutputScaleValue = 0.1;
    private static final double pidActivationConstant  = 0.1;
    private static final double pidDeactivationConstant = 0.5;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public ShooterControl robotShooterControl;
    
    private double m_current = 0.0; //current counts per second generated by the quadrature
    private double m_error = 0.0;

    public PIDShooter() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Shooter", P, I, D);
        robotShooterControl = new ShooterControl(0, 0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Shooter", "PIDSubsystem Controller", getPIDController());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        
    }

    public ShooterControl getRobotShooterControl() {
        return robotShooterControl;
    }

    //sets the desireable speed of the wheel
    public void setSpeed(double speed) {
        desiredFrisbeeSpeed = speed;
        this.setSetpoint(desiredFrisbeeSpeed);
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE

        double rate = RobotMap.shooterQuadrature.getRate();
        SmartDashboard.putNumber("Shooter quadrature" , rate);
        
        return rate;

    }
    

    protected void usePIDOutput(double pidOutput) {
        PIDController pid = this.getPIDController();
        //if (Math.abs(desiredFrisbeeSpeed - shooterQuadrature.getRate()) > pidDeactivationConstant) {
        if ( Math.abs(pid.getError()) > pidDeactivationConstant )
        {
            if (pid.getError() > 0) {
                setShooterMotorSpeed(1.0);
            } else {
                setShooterMotorSpeed(0);
            }
            
            pid.setPID(P, 0, 0);
        } 
        else {
            
            pid.setPID(P,I,D);
            speed = currentMotorSpeed + pidOutput * pidOutputScaleValue;
            
            speed = MathHelper.clamp(speed, 0, 1);

            setShooterMotorSpeed(speed);
        }

    }
    
    private void setShooterMotorSpeed(double speed)
    {
        RobotMap.shooterMotor.set(speed);
        currentMotorSpeed = speed;
        SmartDashboard.putNumber("Shooter speed", speed);
    }
    public void stop() {
        this.disable();
    }

    public void shooterSpeedUp(double speedUpConstant) {
        speed *= (1+speedUpConstant);
    }
    
}
