// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc948.NRGRobot2013.subsystems;

import edu.wpi.first.wpilibj.Solenoid;
import org.usfirst.frc948.NRGRobot2013.RobotMap;
import org.usfirst.frc948.NRGRobot2013.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * @author Patrick
 */
public class DiscMagazine extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    //Solenoids controlling the state of the disc magazine piston
    
    Solenoid magPiston = RobotMap.magPiston;
        
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        magPiston.set(false);
    }
    
    /**
     * If magPistonOut is set to false, magPistonIn should be set to true, and the piston should be in.
     * If magPistonOut is set to true, magPistonIn should be set to false, and the piston should be out.
     * @return 
     */
    
    //Returns the state of magPistonOut which corresponds to the state of the piston
    public boolean getState() {
        return magPiston.get();
    }
    
    //sets the state of magPistonOut to the desired state, and sets the state of magPistonIn to the opposite
    public void releaseFrisbee() throws InterruptedException {
        magPiston.set(true); //Shoots the piston out
        
        Thread.sleep(1000); //Waits for 1 second
        
        magPiston.set(false); //Pulls the piston back in
    }
}

