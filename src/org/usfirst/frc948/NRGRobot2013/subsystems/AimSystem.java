// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

package org.usfirst.frc948.NRGRobot2013.subsystems;

import org.usfirst.frc948.NRGRobot2013.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import org.usfirst.frc948.NRGRobot2013.utilities.MathHelper;

/**
 * Author: Matthew F, Jared L
 */
public class AimSystem extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //TODO: Experiment the PID Values
    private static final double P = 0.02;
    private static final double I = 0.01;
    private static final double D = 0.0;
    private double maxSpeed = 1.0;
    
    private double unknownAngle;
    
    private static final double DEGREE_TOLERANCE = 1.0;
   /* SpeedController shooterAngleMotor = RobotMap.shooterAngleMotor;
    Encoder azimuthQuadrature = RobotMap.azimuthQuadrature;
    
    DigitalInput minAngleSwitch = RobotMap.minAngleSwitch;
    DigitalInput maxAngleSwitch = RobotMap.maxAngleSwitch;*/

    public AimSystem() {
        super("AnglePID", P, I, D);
    }

    public double getMotorPower() {
        return 0.0;//shooterAngleMotor.get();
    }
    
    public void encoderReset()
    {
        
    }
    public double getDesiredAngle() {
        return this.getPIDController().getSetpoint();
    }

    public void setDesiredAngle(double desiredAngle) {
        this.getPIDController().reset();
        this.setSetpoint(desiredAngle);
        this.enable();
    }
    
    public void setSpeed(double speed) {
        maxSpeed = speed;
    }
    
    //Digital inputs return true when open, so inverse, right?
    public boolean isAtMinAngle() {
        return false;//minAngleSwitch.get();
    }

    public boolean isAtMaxAngle() {
        return false;//!maxAngleSwitch.get();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        return 0.0;//azimuthQuadrature.pidGet();
    }

    protected void usePIDOutput(double d) {
        double speed = MathHelper.clamp(d, -maxSpeed, maxSpeed);
        
        if (speed > 0 && !isAtMaxAngle()) {
            //shooterAngleMotor.set(speed);
        } else if (speed < 0 && !isAtMinAngle()) {
            //shooterAngleMotor.set(speed);
        } else {
            //shooterAngleMotor.set(0.0);
        }
    }
}