// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc948.NRGRobot2013.subsystems;

import org.usfirst.frc948.NRGRobot2013.RobotMap;
import org.usfirst.frc948.NRGRobot2013.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc948.NRGRobot2013.utilities.ShooterControl; //maybe use this so we can get angle?
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
/**
 * Author: Matthew F, Jared L
 */
public class AimSystem extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final double MAX_ANGLE=  68; //T.B.D (Angle of the pyramid?)
    private static final double MIN_ANGLE = 0;

    //TODO: Experiment the PID Values
    private static final double P = 0.02;
    private static final double I = 0.01;
    private static final double D = 0.0;
    private double desiredAngle;
    private double currentAngle;
    
    private double pidOutput;
    
    private static final double DEGREE_TOLERANCE = 1.0;
    
    SpeedController shooterAngleMotor = RobotMap.shooterAngleMotor;
    Encoder shooterAngleQuadrature =  RobotMap.shooterAngleQuadrature;
    
    public AimSystem(){
        super ("AnglePID", P, I, D);
        
    }
    
    public void setShooterAngle(double degrees, double speed)
    {
        this.setSetpoint(degrees);
        
        double motorSpeed = speed - pidOutput;
        //TODO:How to calculate the correct motorSpeed output with PID
        setMotorSpeed(motorSpeed);
    }
    
    public void resetEncoder()
    {
        shooterAngleQuadrature.reset();
    }
    
    public double getMotorPower() {
        return shooterAngleMotor.get();
    }
    public double getDesiredAngle() {
        return desiredAngle;
    }
    
    public void setMotorSpeed(double speed)
    {
        shooterAngleMotor.set(speed);
    }

    public void setDesiredAngle(double desiredAngle)
    {
        this.desiredAngle = desiredAngle;
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        this.getPIDController().reset();
        this.getPIDController().enable();
    }

    protected double returnPIDInput() {
        return shooterAngleQuadrature.get();
    }

    protected void usePIDOutput(double d) {
        pidOutput = d;
    }
}